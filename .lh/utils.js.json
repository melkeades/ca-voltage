{
    "sourceFile": "utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1708124148974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1708124148974,
            "name": "Commit-0",
            "content": "export const sel = (e) => document.querySelector(e)\r\nexport const selAll = (e) => document.querySelectorAll(e)\r\nexport const vh = (percent) => window.innerHeight * (percent / 100)\r\nexport const vw = (percent) => window.innerWidth * (percent / 100)\r\n\r\n// export function debounce(func, time = 100) {\r\n//   let timer = 0\r\n//   return function (event) {\r\n//     if (timer) clearTimeout(timer)\r\n//     timer = setTimeout(func, time, event)\r\n//   }\r\n// }\r\nexport function debounce(func, timeout = 100) {\r\n  let timer\r\n  return (...args) => {\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      func.apply(this, args)\r\n    }, timeout)\r\n  }\r\n}\r\nexport function devMode(mode) {\r\n  if (mode === 0) {\r\n    return\r\n  } else if (mode === 1) {\r\n    let i = 0\r\n    document.querySelectorAll('[data-video-urls]').forEach((el) => {\r\n      el.querySelector('video').remove()\r\n      i++\r\n    })\r\n    console.log('devMode, removed videos:', i)\r\n  } else if (mode === 2) {\r\n    const devRemoveList = []\r\n    // const devRemoveList = [videoHero$, introSec$, aboutSec$]\r\n    devRemoveList.forEach((el) => {\r\n      el.remove()\r\n    })\r\n    console.log('devMode: removing sections')\r\n  }\r\n}\r\n\r\n\r\nexport function removeSplideClasses(slider) {\r\n  const splide = document.querySelector('.' + slider)\r\n  const track = splide.querySelector('.splide__track')\r\n  const list = splide.querySelector('.splide__list')\r\n  const slide = splide.querySelectorAll('.splide__slide')\r\n  splide.classList.remove('splide')\r\n  track.classList.remove('splide__track')\r\n  list.classList.remove('splide__list')\r\n  slide.forEach((slide) => slide.classList.remove('splide__slide'))\r\n}\r\nexport function addSplideClasses(slider, trackClass = '') {\r\n  let splide\r\n  if (typeof slider === 'string') {\r\n    splide = document.querySelector('.' + slider)\r\n  } else if (isDomEl(slider)) {\r\n    splide = slider\r\n  }\r\n  // const track = splide.children[0]\r\n  // const track = splide.querySelector('.w-dyn-list')\r\n  const track = trackClass === '' ? splide.querySelector('.w-dyn-list') : splide.querySelector(trackClass)\r\n\r\n  const list = track.children[0]\r\n  const slide = list.childNodes\r\n  splide.classList.add('splide')\r\n  track.classList.add('splide__track')\r\n  list.classList.add('splide__list')\r\n  slide.forEach((slide) => slide.classList.add('splide__slide'))\r\n}\r\n\r\nexport function connectSplideArrows(splide, classPrefix) {\r\n  sel(`.${classPrefix}__arrows .arrow--left`).addEventListener('pointerdown', function () {\r\n    splide.go('<')\r\n  })\r\n\r\n  sel(`.${classPrefix}__arrows .arrow:not(.arrow--left)`).addEventListener('pointerdown', function () {\r\n    splide.go('>')\r\n  })\r\n}\r\nexport function connectSplideBullets(splide, classPrefix) {\r\n  // parse bullets inside the container and repopulate\r\n  const pagination$ = sel(`.${classPrefix}__pagination`)\r\n  let bulletPressed = false\r\n  if (splide.length > 1) {\r\n    const bullet$ = sel(`.${classPrefix}__pagination .bullet:not(.bullet--active)`)\r\n    let fragment = document.createDocumentFragment()\r\n    for (let i = 0; i < splide.length; i++) {\r\n      let clone$ = bullet$.cloneNode(true)\r\n      clone$.addEventListener('click', (e) => {\r\n        bulletPressed = true\r\n        splide.go(i)\r\n      })\r\n      fragment.appendChild(clone$)\r\n    }\r\n    fragment.firstChild.classList.add('bullet--active')\r\n    pagination$.replaceChildren(fragment)\r\n  } else {\r\n    pagination$.replaceChildren()\r\n  }\r\n  splide.on('move', function (newIndex, oldIndex) {\r\n    sel(`.${classPrefix}__pagination .bullet--active`).classList.remove('bullet--active')\r\n    sel(`.${classPrefix}__pagination .bullet:nth-of-type(${splide.index + 1})`).classList.add('bullet--active')\r\n  })\r\n}\r\n\r\nexport function splideAutoWidth(splide) {\r\n  // if not enough logos it will center them and stop the slider\r\n  const Components = splide.Components\r\n  // to remove duplicates for inactive/small slider\r\n  splide.on('overflow', function (isOverflow) {\r\n    splide.go(0) // Reset the carousel position\r\n\r\n    splide.options = {\r\n      focus: isOverflow ? 'center' : '',\r\n      drag: isOverflow ? 'free' : false,\r\n      clones: isOverflow ? undefined : 0, // Toggle clones\r\n    }\r\n  })\r\n  let sliderOverflow = true\r\n  let sliderReady = false\r\n  // to center inactive/small slider\r\n  splide.on('resized', function () {\r\n    var isOverflow = Components.Layout.isOverflow()\r\n    sliderOverflow = isOverflow\r\n    var list = Components.Elements.list\r\n    var lastSlide = Components.Slides.getAt(splide.length - 1)\r\n\r\n    if (lastSlide) {\r\n      // Toggles `justify-content: center`\r\n      list.style.justifyContent = isOverflow ? 'flex-start' : 'center'\r\n\r\n      // Remove the last margin\r\n      if (!isOverflow) {\r\n        lastSlide.slide.style.marginRight = ''\r\n      }\r\n    }\r\n    if (sliderReady) {\r\n      splideInit()\r\n    }\r\n  })\r\n  splide.on('mounted', splideInit)\r\n  function splideInit() {\r\n    sliderReady = true\r\n    if (!sliderOverflow) {\r\n      splide.Components.AutoScroll.pause()\r\n    } else if (sliderOverflow && splide.Components.AutoScroll.isPaused()) {\r\n      // } else if (sliderOverflow && splide.Components.AutoScroll?.isPaused()) {\r\n      splide.Components.AutoScroll.play()\r\n    }\r\n  }\r\n}\r\n\r\nexport function onDomReady(run) {\r\n  if (document.readyState !== 'loading') {\r\n    run()\r\n  } else {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      run()\r\n    })\r\n  }\r\n}\r\n\r\n// Add an observer that checks if a class exists. If it does remove the observer and call a function\r\nexport function addObserver(element, className, callback) {\r\n  const observer = new MutationObserver(function (mutations) {\r\n    mutations.forEach(function (mutation) {\r\n      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\r\n        observer.disconnect()\r\n        callback()\r\n      }\r\n    })\r\n  })\r\n  observer.observe(element, {\r\n    attributes: true,\r\n    attributeFilter: ['class'],\r\n  })\r\n}\r\n\r\nimport gsap from 'gsap'\r\nimport { ScrollTrigger } from 'gsap/ScrollTrigger'\r\n\r\nexport function scrollTriggerInit(distance = 0, elClassName = '', sectionClassName = '', fromToType = '', topMiddleBottom = '', markers = false) {\r\n  const tlType = fromToType === '' ? 'fromTo' : fromToType\r\n  const stPosition = topMiddleBottom === '' ? 'middle' : topMiddleBottom\r\n  // negative distance = front object (faster on scroll), positive distance = back object (slower on scroll/more sticky)\r\n  const tl = gsap.timeline({ defaults: { ease: 'none' } })\r\n  if (tlType === 'fromTo') {\r\n    let fromDistance = -distance,\r\n      toDistance = distance\r\n    // remove the minus sign in a string for fromDistance\r\n    if (typeof distance === 'string' && distance.charAt(0) === '-') fromDistance = distance.substring(1)\r\n\r\n    tl.fromTo('.' + elClassName, { y: fromDistance }, { y: toDistance })\r\n  } else if (tlType === 'to') {\r\n    tl.to('.' + elClassName, { y: distance })\r\n    console.log('to')\r\n  } else if (tlType === 'from') {\r\n    console.log('from')\r\n    tl.from('.' + elClassName, { y: distance })\r\n  }\r\n\r\n  let start = 'top bottom'\r\n  let end = 'bottom top'\r\n  if (stPosition === 'top') {\r\n    start = 'top top'\r\n  } else if (stPosition === 'bottom') {\r\n    end = 'bottom bottom'\r\n  }\r\n\r\n  sectionClassName = sectionClassName || elClassName\r\n  return ScrollTrigger.create({\r\n    animation: tl,\r\n    trigger: '.' + sectionClassName,\r\n    start: start,\r\n    end: end,\r\n    markers: markers,\r\n    scrub: true,\r\n    delay: 0.0,\r\n  })\r\n}\r\n\r\nexport function addSwiperClasses(slider) {\r\n  const swiper = document.querySelector('.' + slider)\r\n  const list = swiper.children[0]\r\n  const slide = list.childNodes\r\n  swiper.classList.add('swiper')\r\n  list.classList.add('swiper-wrapper')\r\n  slide.forEach((slide) => slide.classList.add('swiper-slide'))\r\n}\r\n"
        }
    ]
}