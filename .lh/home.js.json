{
    "sourceFile": "home.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1710809113005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1710809178128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n       fragment.appendChild(span)\r\n     })\r\n     mapNum$.replaceChildren(fragment)\r\n \r\n-    const dot$a = selAll('.map__poc circle')\r\n+    const dot$a = selAll('.map__poc ')\r\n     console.log(dot$a)\r\n \r\n     const mapNumbersTl = gsap.timeline({ paused: true, defaults: { ease: 'none' } })\r\n \r\n"
                },
                {
                    "date": 1710809186811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n       fragment.appendChild(span)\r\n     })\r\n     mapNum$.replaceChildren(fragment)\r\n \r\n-    const dot$a = selAll('.map__poc ')\r\n+    const dot$a = selAll('.map__poc')\r\n     console.log(dot$a)\r\n \r\n     const mapNumbersTl = gsap.timeline({ paused: true, defaults: { ease: 'none' } })\r\n \r\n"
                }
            ],
            "date": 1710809113005,
            "name": "Commit-0",
            "content": "import gsap from 'gsap'\r\nimport { ScrollTrigger } from 'gsap/ScrollTrigger'\r\nimport Splide from '@splidejs/splide'\r\nimport { AutoScroll } from '@splidejs/splide-extension-auto-scroll'\r\nimport { Intersection } from '@splidejs/splide-extension-intersection'\r\n\r\nimport '@splidejs/splide/css'\r\n\r\nimport { addSplideClasses, connectSplideArrows, connectSplideBullets, debounce, sel, selAll, vw } from './utils'\r\n\r\nexport default function home() {\r\n  const mapLocationW$ = sel('.map__location-w')\r\n  const location$a = mapLocationW$.querySelectorAll('.w-dyn-list .map__location')\r\n  // const fragment = document.createDocumentFragment()\r\n  const mapPosition = sel('.map__map').getBoundingClientRect()\r\n  const markerRadius = sel('.map__state__fill').getBoundingClientRect().width / 2\r\n\r\n  const mapWidth = mapPosition.width\r\n  // const mapWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\r\n  let locationTl = {}\r\n  location$a.forEach((location) => {\r\n    const state = location.dataset.map\r\n    const mapState$ = sel('#' + state)\r\n    const mapStateWrap$ = mapState$.querySelector('.map__state-in')\r\n    const mapStateW$ = mapState$.querySelector('.map__state')\r\n    const mapMarker$ = mapState$.querySelector('.map__state__fill')\r\n    const markerPosition = mapMarker$.getBoundingClientRect().x - mapPosition.x\r\n    const xShift = ((markerPosition - mapWidth / 2) / mapWidth) * 50\r\n    const yShift = -10\r\n\r\n    if (markerPosition > mapWidth / 2) {\r\n      location.classList.add('is--left')\r\n    }\r\n\r\n    location.style.left = ((markerPosition + markerRadius + xShift) / mapWidth) * 100 + '%'\r\n    location.style.top = mapMarker$.getBoundingClientRect().y + markerRadius - mapPosition.y + yShift + 'px'\r\n    const line$ = location.querySelector('.map__line path')\r\n    line$.setAttribute('d', `M0 100L150 10H${location.getBoundingClientRect().width}`)\r\n\r\n    const lineLength = line$.getTotalLength()\r\n\r\n    locationTl[state] = gsap\r\n      .timeline({ defaults: { ease: 'power4.inOut', duration: 0.6 }, paused: true })\r\n      .to(location, { opacity: 1, duration: 0.3 }, 0)\r\n      .to(mapMarker$, { fill: 'white', duration: 0.3 }, 0)\r\n      .to(\r\n        mapStateWrap$,\r\n        {\r\n          x: xShift,\r\n          y: yShift,\r\n          scale: 1.1,\r\n          filter: 'drop-shadow(0px 40px 20px rgba(46, 83, 127, 0.25))',\r\n          transformOrigin: 'center',\r\n        },\r\n        0\r\n      )\r\n      .to(mapStateW$, { fill: '#1999F7' }, 0)\r\n      // .to(mapStateW$, { y: -10, fill: 'var(--base-color-brand--blue)' }, 0)\r\n      .from(location.querySelector('.map__location__info'), { y: 30, ease: 'power2.out' }, 0)\r\n      .fromTo(\r\n        line$,\r\n        {\r\n          strokeDashoffset: 0, // where is starts\r\n          strokeDasharray: 0 + ' ' + lineLength, // dash length and gap length\r\n        },\r\n        { strokeDashoffset: 0, strokeDasharray: lineLength + ' ' + lineLength, duration: 0.3 },\r\n        0.3\r\n      )\r\n\r\n    // fragment.appendChild(location)\r\n  })\r\n\r\n  // mapLocationW$.querySelector('.location__info-slider').replaceChildren(fragment)\r\n\r\n  const mapStateW$ = selAll('.map__state-w')\r\n  mapStateW$.forEach((mapState) => {\r\n    mapState.addEventListener('mouseenter', function () {\r\n      locationTl[this.id].play()\r\n    })\r\n    mapState.addEventListener('mouseleave', function () {\r\n      locationTl[this.id].reverse()\r\n    })\r\n  })\r\n  function testSliderInit() {\r\n    const cont = sel('.tests__cont')\r\n    const cont1 = sel('.tests__cont-1')\r\n\r\n    const name = 'tests'\r\n    addSplideClasses(name + '__slider')\r\n    const splide = new Splide('.' + name + '__slider', {\r\n      arrows: false,\r\n      pagination: false,\r\n      gap: '20rem',\r\n      type: 'loop',\r\n      perPage: 1,\r\n      speed: 1500,\r\n      interval: 5000,\r\n      easing: 'cubic-bezier(0.16, 1, 0.3, 1)',\r\n      autoplay: 'pause',\r\n      intersection: {\r\n        inView: {\r\n          autoplay: true,\r\n        },\r\n        outView: {\r\n          autoplay: false,\r\n        },\r\n      },\r\n    }).mount({ Intersection })\r\n\r\n    function updateGap() {\r\n      const gap = cont1.getBoundingClientRect().x - cont.getBoundingClientRect().x\r\n      const vw5 = vw(5)\r\n      splide.options.gap = gap < vw5 ? gap + vw5 : gap\r\n      splide.refresh()\r\n    }\r\n    const refresh = debounce(updateGap, 100)\r\n    splide.on('resize', () => {\r\n      refresh()\r\n    })\r\n    connectSplideArrows(splide, name)\r\n    connectSplideBullets(splide, name)\r\n  }\r\n  testSliderInit()\r\n\r\n  const servicesList$ = sel('.services__list')\r\n  const servicesItem$a = selAll('.services__item')\r\n  const servicesTlSt = gsap.timeline({ defaults: { ease: 'none' } })\r\n\r\n  servicesItem$a.forEach((item, index) => {\r\n    item.style.cursor = 'pointer'\r\n    item.addEventListener('pointerdown', function () {\r\n      console.log('i:' + index)\r\n    })\r\n    if (index === 0) return\r\n\r\n    servicesTlSt\r\n      .to(servicesItem$a[index - 1], { '--services-opacity': 0 }, index)\r\n      .to(item, { '--services-opacity': 1 }, index)\r\n      .to('.service__img-' + index, { opacity: 0 }, index)\r\n  })\r\n\r\n  ScrollTrigger.create({\r\n    trigger: servicesList$,\r\n    start: 'top 50%',\r\n    end: 'bottom 75%',\r\n    animation: servicesTlSt,\r\n    scrub: true,\r\n    snap: 1 / servicesItem$a.length,\r\n    // markers: true,\r\n  })\r\n\r\n  const navbarDd$a = selAll('.navbar__dd')\r\n  let mm = gsap.matchMedia()\r\n  mm.add('(min-width: 991px)', (context) => {\r\n    context.add('mouseenter', (e) => {\r\n      const el = e.target.parentNode.querySelector('.navbar__dd__list')\r\n      gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration: 0.3 }) // <- now it gets recorded in the Context\r\n    })\r\n    context.add('mouseleave', (e) => {\r\n      const to = e.toElement || e.relatedTarget\r\n      // console.log(e, to, to.classList.contains('navbar__cont'))\r\n      if (to.classList.contains('w-dropdown-list') || to.classList.contains('navbar__cont')) return\r\n\r\n      const el = e.target.parentNode.querySelector('.navbar__dd__list')\r\n      gsap.to(el, { opacity: 0, duration: 0.3 }) // <- now it gets recorded in the Context\r\n    })\r\n\r\n    navbarDd$a.forEach((dd) => {\r\n      dd.addEventListener('mouseenter', context.mouseenter)\r\n      dd.addEventListener('mouseleave', context.mouseleave)\r\n    })\r\n\r\n    return () => {\r\n      navbarDd$a.forEach((dd) => {\r\n        dd.removeEventListener('mouseenter', context.mouseenter)\r\n        dd.removeEventListener('mouseleave', context.mouseleave)\r\n      })\r\n    }\r\n  })\r\n\r\n  function mapCounterInit() {\r\n    const mapNum$ = sel('.map__h__num')\r\n    // get the line height of the element in em\r\n    const lineHeight = parseFloat(getComputedStyle(mapNum$).lineHeight) / parseFloat(getComputedStyle(mapNum$).fontSize)\r\n\r\n    const num = mapNum$.textContent\r\n    let numbers = num.split('').map(Number)\r\n\r\n    let fragment = document.createDocumentFragment()\r\n    const time = 3\r\n\r\n    numbers.forEach((n, i) => {\r\n      const span = document.createElement('span')\r\n      span.textContent = '0 1 2 3 4 5 6 7 8 9 0'\r\n      span.classList.add('map__num', 'map__num-' + (i + 1))\r\n      fragment.appendChild(span)\r\n    })\r\n    mapNum$.replaceChildren(fragment)\r\n    \r\n    const dot$a = selAll('.map__poc circle')\r\n    console.log(dot$a)\r\n    \r\n\r\n    const mapNumbersTl = gsap.timeline({ paused: true, defaults: { ease: 'none' } })\r\n\r\n    numbers.forEach((number, i) => {\r\n      const index = i + 1\r\n      let params = {}\r\n      switch (index) {\r\n        case 1:\r\n          params = { y: -number * lineHeight + 'em', duration: time }\r\n          break\r\n        case 2:\r\n          params = { y: -(number + 10) * lineHeight + 'em', repeat: 1, duration: time / index }\r\n          break\r\n      }\r\n      mapNumbersTl.to('.map__num-' + index, params, 0)\r\n    })\r\n\r\n    ScrollTrigger.create({\r\n      trigger: mapNum$,\r\n      start: 'top 75%',\r\n      animation: gsap.to(mapNumbersTl, { progress: 1, duration: 3, ease: 'power4.out' }),\r\n    })\r\n  }\r\n  mapCounterInit()\r\n\r\n  mm.add('(max-width: 990px)', () => {\r\n    const name = 'location'\r\n    const locationSlider$ = sel('.' + name + '__slider')\r\n    const locationInfoSlider$ = sel('.' + name + '__info-slider')\r\n    addSplideClasses(locationSlider$)\r\n    addSplideClasses(locationInfoSlider$)\r\n\r\n    const locationInfoSlider = new Splide(locationInfoSlider$, {\r\n      type: 'fade',\r\n      rewind: true, // to make it \"loop\" with the type fade\r\n      arrows: false,\r\n      pagination: false,\r\n      width: 300,\r\n      gap: 0,\r\n    })\r\n    const locationSlider = new Splide(locationSlider$, {\r\n      arrows: false,\r\n      pagination: false,\r\n      gap: '1rem',\r\n      type: 'loop',\r\n      autoWidth: true,\r\n      drag: 'free',\r\n      focus: 'center',\r\n      isNavigation: true,\r\n      autoScroll: { speed: 0.6, autoStart: true },\r\n    })\r\n    let currentState = ''\r\n    const updateMapState = debounce(() => {\r\n      const newSate = sel('.location__slider').querySelector('.is-active').dataset.map\r\n      if (currentState === newSate) return\r\n      if (currentState) sel('#' + currentState).classList.remove('is--active')\r\n      sel('#' + newSate).classList.add('is--active')\r\n      currentState = newSate\r\n    })\r\n    locationSlider.mount({ AutoScroll })\r\n    locationInfoSlider.mount()\r\n    locationSlider.on('active', (slide) => {\r\n      locationInfoSlider.go(slide.slideIndex)\r\n      updateMapState()\r\n    })\r\n  })\r\n}\r\n"
        }
    ]
}